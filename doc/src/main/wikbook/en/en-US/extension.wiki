= Groovy command system =

The shell command system is based on the [[Groovy>>http://groovy.codehaus.org/]] language and can easily be extended.

== Groovy file ==

Each command has a corresponding Groovy file that contains a command class that will be invoked by the shell.
The files are located in the ///WEB-INF/groovy/commands// directory and new files can be added here.

In addition of that there are two special files called //login.groovy// and //logout.groovy// in the
///WEB-INF/groovy// directory that are executed upon login and logout of a user. Those files can be studied to
understand better how the shell works.

== Groovy execution ==

When the user types a command in the sell, the command line is parsed by the [[args4j>>https://args4j.dev.java.net/]] framework
and injected in the command class. A simple example, the command ##connect -c portal -u root -p gtn portal-system##
creates the connect command instance and args4j injects the options and arguments on the class:

{{java}}
@Description("Connect to a workspace")
class connect extends org.crsh.command.ClassCommand
{

  @Option(name="-u",aliases=["--username"],usage="user name")
  def String userName;

  @Option(name="-p",aliases=["--password"],usage="password")
  def String password;

  @Option(name="-c",aliases=["--container"],usage="portal container name (eXo portal specific)")
  def String containerName;

  @Argument(required=true,index=0,usage="workspace name")
  def String workspaceName;

  public Object execute() throws ScriptException {
    ...
  }
}
{{/java}}

== Shell context ==

A command is a Groovy object and it can access or use the contextual variables. A few variables are maintained by the shell
and should be considered with caution. The shell also provides a few functions that can be used, those functions defined in
//login.groovy//

=== Existing context variables ===

* The ##session## variable is managed by the ##connect## and ##disconnect## commands.
Commands should be able to use it for accessing JCR session but not update this variable.
* The ##currentPath## variable contains the current path of the shell and it should not be used directly.
Instead one should use the function ##getCurrentNode()## and ##setCurrentNode(Node node)## to
update the underlying path.

=== Existing functions ===

* The ##assertConnected()## checks that the user is connected. It should be used at the beginning of a command
that interacts with the session
* The ##getCurrentNode()## returns the current node
* The ##setCurrentNode(Node node)## updates the current node
* The ##findNodeByPath()## functions returns a node based on the provided path. If the provided path is null
then the "/" root path is considered. The path can be either relative or absolute. If the path is relative the current
node will be used to find the node.
* The ##formatValue(Value value)## formats a JCR value into a suitable text value.
* The ##formatPropertyValue(Property property)## formats a JCR property value into a suitable text value.
If the property is multiple then it will return a comma separated list surrounded by square brackets.

== You want to contribute a command? ==

Drop me an email (see my @ on www.julienviet.com).