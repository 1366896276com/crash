= Groovy command system =

The shell command system is based on the [[Groovy>>http://groovy.codehaus.org/]] language and can easily be extended.

== Groovy file ==

Each command has a corresponding Groovy file that contains a command class that will be invoked by the shell.
The files are located in the ///WEB-INF/crash/commands// directory and new files can be added here.

New commands can directly be placed in the commands dirctory however they can also be placed in a sub directory of the
command directory, which is useful to group commands of the same kind.

In addition of that there are two special files called //login.groovy// and //logout.groovy// that are executed upon login
and logout of a user. They are useful to setup and cleanup things related to the current user session.

== Groovy execution ==

When the user types a command in the sell, the command line is parsed by the //cmdline// framework
and injected in the command class. Previously the //args4j// framework was used but this framework does not support
natively code completion and could not be extended to support it. The support of command line completion is the
main motivation of the development of such a framework. To learn more, the best is to study the existing commands
as the framework is quite easy to use, the following features are supported:

* Annotation based framework
* Provide accurate contextual code completion
* Support sub commands (ï¿½ la git like "git add") for grouping commands of the same kind inside the same class as methods
* Advanced support for usage and manual


A simple example, the ##sleep 1## command pauses the shell for one second, let's briefly study its code:

{{java}}
class sleep extends CRaSHCommand {
  @Usage("sleep for some time")
  @Command
  Object main(@Usage("Sleep time in seconds") @Argument int time) throws ScriptException {
    if (time < 0)
      throw new ScriptException("Cannot provide negative time value $time");
    Thread.sleep(time * 1000);
    return null;
  }
}{{/java}}

The ##@Usage## annotation gives short information about the command itself, another annotation is available for documenting
more formally the command: ##@Man## but it is not used in this example.

The ##@Command## tags the ##main(...)## method as a command method. Any number of method can be tagged as such, providing
a convenient way to pack commands of the same kind. By default the //main// is a special convention indicating that
executing the command should not require to explicitely use the main.

The ##@Argument## annotation describes the command unique argument that is the time to sleep. The same ##@Usage## annotation
is used again to describe briefly the argument. Again it could be possible to use the ##@Man## annotation.

== Shell context ==

A command is a Groovy object and it can access or use the contextual variables. A few variables are maintained by the shell
and should be considered with caution. The shell also provides a few functions that can be used, those functions defined in
//login.groovy//

= Pluggable authentication {{anchor id=pluggable_auth /}} =

Creating a custom is done by implementing a CRaSH plugin that provides an implementation of the ##AuthenticationPlugin##
interface, let's study the //simple// authentication plugin implementation.

The ##AuthenticationPlugin## is the interface to implement to integrate CRaSH with an authentication mechanism:

{{java}}
{@include org.crsh.auth.AuthenticationPlugin}
{{/java}}

The integration as a CRaSH plugin mandates to extend the class ##CRaSHPlugin## with the generic type ##AuthenticationPlugin##:

{{java}}
public class SimpleAuthenticationPlugin extends
    CRaSHPlugin<AuthenticationPlugin> implements
    AuthenticationPlugin {

{@include org.crsh.auth.SimpleAuthenticationPlugin#getName()}

{@include org.crsh.auth.SimpleAuthenticationPlugin#getImplementation()}

  ...

}
{{/java}}

* The ##getName()## method returns the //simple// value that matchs the //crash.auth// configuration property
* The ##getImplementation()## method returns the object that implements the ##AuthenticationPlugin## class, this method
is implemented from the ##CRaSHPlugin## abstract class, in our case it simply returns ##this## as the plugin and the
implementation of ##AuthentionPlugin## are the same class

Now let's study how the plugin retrieves the configuration properties ##crash.auth.simple.username## and ##crash.auth.simple.password##:

{{java}}
public class SimpleAuthenticationPlugin extends
    CRaSHPlugin<AuthenticationPlugin> implements
    AuthenticationPlugin {

{@include org.crsh.auth.SimpleAuthenticationPlugin#SIMPLE_USERNAME}

{@include org.crsh.auth.SimpleAuthenticationPlugin#SIMPLE_PASSWORD}

{@include org.crsh.auth.SimpleAuthenticationPlugin#createConfigurationCapabilities()}

{@include org.crsh.auth.SimpleAuthenticationPlugin#username}

{@include org.crsh.auth.SimpleAuthenticationPlugin#password}

{@include org.crsh.auth.SimpleAuthenticationPlugin#init()}

  ...

}
{{/java}}

* The ##createConfigurationCapabilities()## method returns the constants ##SIMPLE_USERNAME## and ##SIMPLE_PASSWORD## that defines
the configuration properties that the plugin uses
* The ##init()## method is invoked by CRaSH before the plugin will be used, at this moment, the configuration properties are retrieved
from the plugin context with the method ##getContext()## available in the ##CRaSHPlugin## base class

Finally the plugin needs to provide the ##authenticate()## method that implement the authentication logic:

{{java}}
{@include org.crsh.auth.SimpleAuthenticationPlugin#authenticate(java.lang.String,java.lang.String)}
{{/java}}

The logic is straightforward with an equality check of the username and password.

Last but not least we must declare our plugin to make it recognized by CRaSH, this is achieved thanks to the ##java.util.ServiceLoader##
class. CRaSH uses the ##ServiceLoader## for loading plugins and the loader needs a file to be present in the jar file containing
the class under the name ##META-INF/services/org.crsh.plugin.CRaSHPlugin## containing the class name of the plugin:

{{code}}
org.crsh.auth.SimpleAuthenticationPlugin
{{/code}}

When all of this is done, the plugin and its service loader descriptor must be package in a jar file and available on the classpath
of CRaSH.

{{info}}You can learn more about the ##java.util.ServiceLoader## by looking at the online
[[javadoc>>http://docs.oracle.com/javase/6/docs/api/java/util/ServiceLoader.html]]
{{/info}}
