== JCR commands ==

=== Connecting to a repository ===

You must first connect to a repository before any other JCR based operation. When you are connected the shell will maintain
a JCR session and allows you to interact with the session in a shell oriented fashion. The ##connect## command
is used to perform the connection. The repository name must be specified and optionally you can specify a user name
and password to have more privileges.

{{screen}}
% connect -c portal portal-system
Connected to workspace portal-system
{{/screen}}

or

{{screen}}
% connect -c portal -u root -p gtn portal-system
Connected to workspace portal-system
{{/screen}}

=== Listing the content of a node ===

The ##ls## command shows the content of a node. By default it lists the content of the current node. It can
accept a path argument that can be absolute or relative.

{{screen}}
[/]% ls
/
+-properties
| +-jcr:primaryType: nt:unstructured
| +-jcr:mixinTypes: [exo:owneable,exo:privilegeable]
| +-exo:owner: '__system'
| +-exo:permissions: [any read,*:/platform/administrators read,*:/platform/administrators add_node,*:/platform/administrators set_property,*:/platform/administrators remove]
+-children
| +-/workspace
| +-/contents
| +-/Users
| +-/gadgets
| +-/folder
{{/screen}}

=== Changing the current node ===

The ##cd## command allows to change the current path. The command used with no argument, change to the root
directory but you can provide a path argument that can be absolute or relative.

{{screen}}
[/]% cd /gadgets
/gadgets
{{/screen}}

=== Printing the current node ===

The ##pwd## command shows the current node path.

{{screen}}
[/gadgets]% pwd
/gadgets
{{/screen}}

=== Creating a node ===

The ##addnode## command creates one of several nodes. The command takes at least one node as argument, but it can
 take more. Each path can be either absolute or relative. Relative path creates nodes relative to the current node.
 By default the node type is the default repository node type, but the option ##-t## can be used to specify another one.

{{screen}}
[/registry]% addnode foo
Node /foo created
{{/screen}}

{{screen}}
[/registry]% addnode -t nt:file bar juu
Node /bar /juu created
{{/screen}}

{{note}}
The ##addnode## command is a ##<Void,Node>## command that produces all the nodes that were created.
{{/note}}

=== Copying a node ===

The ##cp## command copies a node to a target location in the JCR tree.

{{screen}}
[/registry]% cp Registry Registry2
{{/screen}}

=== Moving a node ===

The ##mv## command can move a node to a target location in the JCR tree. It can be used also to rename a node.

{{screen}}
[/registry]% mv Registry Registry2
{{/screen}}

{{note}}
##mv## command is a ##<Node,Node>## command consuming a stream of node to move them and producing nodes that were moved.
{{/note}}

=== Removing a node or property ===

The ##rm## command removes a node or property specified by its path either absolute or relative. This operation
is executed against the JCR session, meaning that it will not be effective until it is commited to the JCR server.

{{screen}}
[/]% rm foo
Node /foo removed
{{/screen}}

It is possible to specify several nodes.

{{screen}}
[/]% rm foo bar
Node /foo /bar removed
{{/screen}}

{{note}}
##rm## is a ##<Node,Void>## command removing all the consumed nodes.
{{/note}}

=== Updating a property ===

The ##set## command updates the property of a node.

Create or destroy property foo with the value bar on the root node:

{{screen}}
[/]% set foo bar
Property created
{{/screen}}

Update the existing foo property:

{{screen}}
[/]% set foo juu
{{/screen}}

When a property is created and does not have a property descriptor that constraint its type, you can specify it
with the //-t// option

{{screen}}
[/]% set -t LONG long_property 3
{{/screen}}

Remove a property

{{screen}}
[/]% set foo
{{/screen}}

{{note}}
##set## is a ##<Node,Void>## command updating the property of the consumed node stream.
{{/note}}

=== Commiting or rolling back changes ===

The ##commit## operation saves the current session. Conversely the ##rollback## operation rollback
session changes. For both operations It is possible to specify a path to commit a part of the tree.

=== Performing a SQL query ===

Queries in SQL format are possible via the ##select## command. You can write a query with the same syntax defined
by the specification and add options to control the number of results returned. By default the number of nodes is limited
to 5 results:

{{screen}}
[/]% select * from nt:base
The query matched 1114 nodes
+-/
| +-properties
| | +-jcr:primaryType: nt:unstructured
| | +-jcr:mixinTypes: [exo:owneable,exo:privilegeable]
| | +-exo:owner: '__system'
| | +-exo:permissions: [any read,*:/platform/administrators read,*:/platform/administrators add_node,*:/platform/administratorsset_property,*:/platform/administrators remove]
+-/workspace
| +-properties
| | +-jcr:primaryType: mop:workspace
| | +-jcr:uuid: 'a69f226ec0a80002007ca83e5845cdac'
...
{{/screen}}

Display 20 nodes from the offset 10:

{{screen}}
[/]% select * from nt:base -o 10 -l 20
The query matched 1114 nodes
...
{{/screen}}

It is possible also to remove the limit of displayed nodes with the -a option (you should use this option with care) :

{{screen}}
[/]% select * from nt:base -a
The query matched 1114 nodes
...
{{/screen}}

{{note}}
##select## is a ##<Void,Node>## command producing all the matched nodes.
{{/note}}

=== Performing an XPath query ===

todo

=== Exporting a node ===

It is possible to export a node as an nt file of the same workspace with the ##exportnode## command. Then it is
usually possible to access the nt file from webdav.

{{screen}}
[/]% exportnode gadgets /gadgets.xml
The node has been exported
{{/screen}}

=== Importing a node ===

It is possible to import a node from an nt file located in the workspace with the ##importnode## command.

{{screen}}
[/]% importnode /gadgets.xml /
Node imported
{{/screen}}

=== Adding a mixin to a node ===

The ##addmixin## command adds a mixin to an existing node.

{{screen}}
[/gadgets]% addmixin . mix:versionable
{{/screen}}

{{note}}
##addmixin## is a ##<Node,Void>## command adding the specified mixin to the consumed nodes.
{{/note}}

=== Checkin / checkout of versionable nodes ===

Use the commands ##checkin## and ##checkout##.

=== Configuring the node security ===

{{warning}}This is command is only available for eXo JCR{{/warning}}

The ##setperm## commands configures the security of a node based on [[eXo JCR access control>>http://wiki.exoplatform.com/xwiki/bin/view/JCR/Access%20Control]].
When a node is protected by access control, it owns a mixin called ##exo:privilegeable## that contains a ##exo:permissions##
property, for instance:

{{screen}}
[/production]% ls
/production
+-properties
| +-jcr:primaryType: nt:unstructured
| +-jcr:mixinTypes: [exo:privilegeable]
| +-exo:permissions: [*:/platform/administrators read,*:/platform/administrators add_node,*:/platform/administrators set_property,*:/platform/administrators remove]
+-children
| +-/production/app:gadgets
| +-/production/app:applications
| +-/production/mop:workspace
{{/screen}}

You can alter the node permission list with the ##setperm## command:

{{screen}}
[/production]% setperm -i *:/platform/mygroup -a read -a add_node /
Node /production updated to [read,add_node]
{{/screen}}

You can also remove a permission by using the -r option.

{{screen}}
[/production]% setperm -i *:/platform/mygroup -r add_node /
Node /production updated to [read]
{{/screen}}

{{warning}}
The ##setperm## command will add automatically the ##exo:privilegeable## mixin on the node when it is missing.
{{/warning}}

{{note}}
##setperm## is a ##<Node,Void>## command altering the security of the consumed node stream.
{{/note}}


=== Disconnecting ===

The ##disconnect## command disconnect from the repository.

== SCP usage ==

Secure copy can be used to import or export content. The username/password prompted by the SSH server will be used
for authentication against the repository when the import or the export is performed.

=== Export a JCR node ===

The following command will export the node ///gadgets// in the repository //portal-system//
of the portal container //portal//:

{{screen}}
scp -P 2000 root@localhost:portal:portal-system:/production/app:gadgets .
{{/screen}}

The node will be exported as //app_gadgets.xml//.

Note that the portal container name is used for GateIn. If you do omit it, then the root container will be used.

=== Import a JCR node ===

The following command will reimport the node:

{{screen}}
scp -P 2000 gadgets.xml root@localhost:portal:portal-system/production/app:gadgets
{{/screen}}

The exported file format use the JCR system view. You can get more information about that in the JCR specification.