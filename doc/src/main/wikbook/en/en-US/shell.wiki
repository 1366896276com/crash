= Deployment =

Copy the crsh.war in server running eXo Portal 2.5 or GateIn.

= Shell usage =

== Connection ==

You need to connect using telnet or SSH to use the shell.

Telnet connection is done on port 5000:

{{screen}}
juliens-macbook-pro:webapps julien$ telnet localhost 5000
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
Welcome to juliens-macbook-pro.local!
It is Mon Nov 23 15:53:44 CET 2009 now.
%
{{/screen}}

SSH connection is done on port 2000 with the password **//crash//**:

{{screen}}
juliens-macbook-pro:~ julien$ ssh -p 2000 -l root localhost
root@localhost's password:
CRaSH $[crash.version] (http://crsh.googlecode.com)
Welcome to juliens-macbook-pro.local!
It is Fri Jan 08 21:12:53 CET 2010 now.
%
{{/screen}}

== Features ==

* Line edition: the current line can be edited via left and right arrow keys
* History: the key up and key down enable history browsing
* Quoting: simple quotes or double quotes allow to insert blanks in command options and arguments, for instance
//"old boy"// or //'old boy'//. One quote style can quote another, like //"ol' boy"//.

= Commands =

== Getting basic help ==

The ##help## command will display the list of known commands by the shell.

{{screen}}
[/]% help
Try one of these commands with the -h or --help switch [addmixin, cd, checkin, checkout, commit, connect, disconnect, exportnode, help, importnode, ls, pwd, rm, rollback, select, set]
{{/screen}}

== Command line usage ==

The basic CRaSH usage is like any shell, you just type a command with its options and arguments. However it is possible
 to compose commands and create powerful combinations.

=== Basic command usage ===

Typing the command followed by options and arguments will do the job

{{screen}}
% ls -d /
...
{{/screen}}

=== Command help display ===

Any command help can be displayed by using the -h argument:

{{screen}}
% ls -h
List the content of a node
 VAL            : Path of the node content to list
 -d (--depth) N : Print depth
{{/screen}}

=== Advanced command usage ===

A CRaSH command is able to consume and produce a stream of object, allowing complex interactions between commands
where they can exchange stream of compatible objets. Most of the time, JCR nodes are the objects exchanged by the
commands but any command is free to produce or consume any type.

By default a command that does not support this feature does not consumer or produce anything. Such commands usually
inherits from the ##org.crsh.command.ClassCommand## class that does not care about it. If you look at this class
you will see it extends the the ##org.crsh.command.BaseCommand##.

More advanced commands inherits from ##org.crsh.command.BaseCommand## class that specifies two generic types ##<C>##
and ##<P>##:

* ##<C>## is the type of the object that the command consumes
* ##<P>## is the type of the object that the command produces

The command composition provides two operators:

* The pipe operator **|** allows to stream a command output stream to a command input stream
* The distribution operator **+** allows to distribute an input stream to several commands and to combine the output stream
of several commands into a single stream.

=== Connecting a ##<Void,Node>## command to a ##<Node,Void>## command through a pipe ===

{{example title="Remove all nt:unstructed nodes"}}
{{screen}}
% select * from nt:unstructed | rm
{{/screen}}
{{/example}}

=== Connecting a ##<Void,Node>## command to two ##<Node,Void>## commands through a pipe ===

{{example title="Update the security of all nt:unstructed nodes"}}
{{screen}}
% select * from nt:unstructured | setperm -i any -a read + setperm -i any -a write
{{/screen}}
{{/example}}

=== Connecting two ##<Void,Node>## command to a ##<Node,Void>## commands through a pipe ==

{{example title="Add the mixin mix:referenceable to any node of type nt:file or nt:folder"}}
{{screen}}
% select * from nt:file + select * from nt:folder | addmixin mix:referenceable
{{/screen}}
{{/example}}

=== Mixed cases ===

When a command does not consume a stream but is involved in a distribution it will not receive any stream but will
be nevertheless invoked.

Likewise when a command does not produce a stream but is involved in a distribution, it will not produce anything but
will be nevertheless invoked.

== Commands ==

=== Connecting to a repository ===

You must first connect to a repository before any other JCR based operation. When you are connected the shell will maintain
a JCR session and allows you to interact with the session in a shell oriented fashion. The ##connect## command
is used to perform the connection. The repository name must be specified and optionally you can specify a user name
and password to have more privileges.

{{screen}}
% connect -c portal portal-system
Connected to workspace portal-system
{{/screen}}

or

{{screen}}
% connect -c portal -u root -p gtn portal-system
Connected to workspace portal-system
{{/screen}}

=== Listing the content of a node ===

The ##ls## command shows the content of a node. By default it lists the content of the current node. It can
accept a path argument that can be absolute or relative.

{{screen}}
[/]% ls
/
+-properties
| +-jcr:primaryType: nt:unstructured
| +-jcr:mixinTypes: [exo:owneable,exo:privilegeable]
| +-exo:owner: '__system'
| +-exo:permissions: [any read,*:/platform/administrators read,*:/platform/administrators add_node,*:/platform/administrators set_property,*:/platform/administrators remove]
+-children
| +-/workspace
| +-/contents
| +-/Users
| +-/gadgets
| +-/folder
{{/screen}}

=== Changing the current node ===

The ##cd## command allows to change the current path. The command used with no argument, change to the root
directory but you can provide a path argument that can be absolute or relative.

{{screen}}
[/]% cd /gadgets
/gadgets
{{/screen}}

=== Printing the current node ===

The ##pwd## command shows the current node path.

{{screen}}
[/gadgets]% pwd
/gadgets
{{/screen}}

=== Creating a node ===

The ##addnode## command creates one of several nodes. The command takes at least one node as argument, but it can
 take more. Each path can be either absolute or relative. Relative path creates nodes relative to the current node.
 By default the node type is the default repository node type, but the option ##-t## can be used to specify another one.

{{screen}}
[/registry]% addnode foo
Node /foo created
{{/screen}}

{{screen}}
[/registry]% addnode -t nt:file bar juu
Node /bar /juu created
{{/screen}}

{{note}}
The ##addnode## command is a ##<Void,Node>## command that produces all the nodes that were created.
{{/note}}

=== Copying a node ===

The ##cp## command copies a node to a target location in the JCR tree.

{{screen}}
[/registry]% cp Registry Registry2
{{/screen}}

=== Moving a node ===

The ##mv## command can move a node to a target location in the JCR tree. It can be used also to rename a node.

{{screen}}
[/registry]% mv Registry Registry2
{{/screen}}

{{note}}
##mv## command is a ##<Node,Node>## command consuming a stream of node to move them and producing nodes that were moved.
{{/note}}

=== Removing a node or property ===

The ##rm## command removes a node or property specified by its path either absolute or relative. This operation
is executed against the JCR session, meaning that it will not be effective until it is commited to the JCR server.

{{screen}}
[/]% rm foo
Node /foo removed
{{/screen}}

It is possible to specify several nodes.

{{screen}}
[/]% rm foo bar
Node /foo /bar removed
{{/screen}}

{{note}}
##rm## is a ##<Node,Void>## command removing all the consumed nodes.
{{/note}}

=== Updating a property ===

The ##set## command updates the property of a node.

Create or destroy property foo with the value bar on the root node:

{{screen}}
[/]% set foo bar
Property created
{{/screen}}

Update the existing foo property:

{{screen}}
[/]% set foo juu
{{/screen}}

When a property is created and does not have a property descriptor that constraint its type, you can specify it
with the //-t// option

{{screen}}
[/]% set -t LONG long_property 3
{{/screen}}

Remove a property

{{screen}}
[/]% set foo
{{/screen}}

{{note}}
##set## is a ##<Node,Void>## command updating the property of the consumed node stream.
{{/note}}

=== Commiting or rolling back changes ===

The ##commit## operation saves the current session. Conversely the ##rollback## operation rollback
session changes. For both operations It is possible to specify a path to commit a part of the tree.

=== Performing a SQL query ===

Queries in SQL format are possible via the ##select## command. You can write a query with the same syntax defined
by the specification and add options to control the number of results returned. By default the number of nodes is limited
to 5 results:

{{screen}}
[/]% select * from nt:base
The query matched 1114 nodes
+-/
| +-properties
| | +-jcr:primaryType: nt:unstructured
| | +-jcr:mixinTypes: [exo:owneable,exo:privilegeable]
| | +-exo:owner: '__system'
| | +-exo:permissions: [any read,*:/platform/administrators read,*:/platform/administrators add_node,*:/platform/administratorsset_property,*:/platform/administrators remove]
+-/workspace
| +-properties
| | +-jcr:primaryType: mop:workspace
| | +-jcr:uuid: 'a69f226ec0a80002007ca83e5845cdac'
...
{{/screen}}

Display 20 nodes from the offset 10:

{{screen}}
[/]% select * from nt:base -o 10 -l 20
The query matched 1114 nodes
...
{{/screen}}

It is possible also to remove the limit of displayed nodes with the -a option (you should use this option with care) :

{{screen}}
[/]% select * from nt:base -a
The query matched 1114 nodes
...
{{/screen}}

{{note}}
##select## is a ##<Void,Node>## command producing all the matched nodes.
{{/note}}

=== Performing an XPath query ===

todo

=== Exporting a node ===

It is possible to export a node as an nt file of the same workspace with the ##exportnode## command. Then it is
usually possible to access the nt file from webdav.

{{screen}}
[/]% exportnode gadgets /gadgets.xml
The node has been exported
{{/screen}}

=== Importing a node ===

It is possible to import a node from an nt file located in the workspace with the ##importnode## command.

{{screen}}
[/]% importnode /gadgets.xml /
Node imported
{{/screen}}

=== Adding a mixin to a node ===

The ##addmixin## command adds a mixin to an existing node.

{{screen}}
[/gadgets]% addmixin . mix:versionable
{{/screen}}

{{note}}
##addmixin## is a ##<Node,Void>## command adding the specified mixin to the consumed nodes.
{{/note}}

=== Checkin / checkout of versionable nodes ===

Use the commands ##checkin## and ##checkout##.

=== Configuring the node security ===

{{warning}}This is command is only available for eXo JCR{{/warning}}

The ##setperm## commands configures the security of a node based on [[eXo JCR access control>>http://wiki.exoplatform.com/xwiki/bin/view/JCR/Access%20Control]].
When a node is protected by access control, it owns a mixin called ##exo:privilegeable## that contains a ##exo:permissions##
property, for instance:

{{screen}}
[/production]% ls
/production
+-properties
| +-jcr:primaryType: nt:unstructured
| +-jcr:mixinTypes: [exo:privilegeable]
| +-exo:permissions: [*:/platform/administrators read,*:/platform/administrators add_node,*:/platform/administrators set_property,*:/platform/administrators remove]
+-children
| +-/production/app:gadgets
| +-/production/app:applications
| +-/production/mop:workspace
{{/screen}}

You can alter the node permission list with the ##setperm## command:

{{screen}}
[/production]% setperm -i *:/platform/mygroup -a read -a add_node /
Node /production updated to [read,add_node]
{{/screen}}

You can also remove a permission by using the -r option.

{{screen}}
[/production]% setperm -i *:/platform/mygroup -r add_node /
Node /production updated to [read]
{{/screen}}

{{warning}}
The ##setperm## command will add automatically the ##exo:privilegeable## mixin on the node when it is missing.
{{/warning}}

{{note}}
##setperm## is a ##<Node,Void>## command altering the security of the consumed node stream.
{{/note}}


=== Disconnecting ===

The ##disconnect## command disconnect from the repository.

=== Quitting ===

The ##bye## command disconnect from the remote shell.