= Running CRaSH =

CRaSH provides has various ways to be started, it can even be easilty embedded.

== Web archive deployment ==

CRaSH can use a standard web archive to be deployed in a web container. The war file is used for its packaging capabilities
and triggering the CRaSH life cycle start/stop. In this mode CRaSH has two packaging available:

* A core war file found under //deploy/core/crash.war// provides the base CRaSH functionnalities.
* A GateIn war file found under //deploy/gatein/crash.war// provides the additional JCR features but deploys only in
 a GateIn server (Tomcat or JBoss)

You have to copy the crash.war in the appropriate server, regardless of the packaging you use.

== Standalone mode ==

The standalone mode allows you to run CRaSH from the command line. For this matter a few special jars are made available
to you. Each jar adds a functionnality when it is added on the classpath, also each jar embeds its dependencies in order
to save you the burden of having a long classpath

to continue

= Shell usage =

== Connection ==

You need to connect using telnet, SSH to use the shell, there is a third special mode using the JVM input and output.

=== Telnet access ===

Telnet connection is done on port 5000:

{{screen}}
(! 520)-> telnet localhost 5000
Trying ::1...
Connected to localhost.
Escape character is '^]'.
   ______
 .~      ~. |`````````,       .'.                   ..'''' |         |
|           |'''|'''''      .''```.              .''       |_________|
|           |    `.       .'       `.         ..'          |         |
 `.______.' |      `.   .'           `. ....''             |         | $[crash.version]

Follow and support the project on http://crsh.googlecode.com
Welcome to julien.local + !
It is Fri Dec 03 16:20:40 CET 2010 now
{{/screen}}

The ##bye## command disconnect from the shell.

=== SSH access ===

SSH connection is done on port 2000 with the password **//crash//**:

{{screen}}
juliens-macbook-pro:~ julien$ ssh -p 2000 -l root localhost
root@localhost's password:
CRaSH $[crash.version] (http://crsh.googlecode.com)
Welcome to juliens-macbook-pro.local!
It is Fri Jan 08 21:12:53 CET 2010 now.
%
{{/screen}}

The ##bye## command disconnect from the shell.

=== Native access ===

A third mode is available for standalone CRaSH usage because it uses the JVM native input and output. When you are using
it, CRaSh will be available just after the JVM is launched.

== Features ==

* Line edition: the current line can be edited via left and right arrow keys
* History: the key up and key down enable history browsing
* Quoting: simple quotes or double quotes allow to insert blanks in command options and arguments, for instance
//"old boy"// or //'old boy'//. One quote style can quote another, like //"ol' boy"//.
* Completion: an advanced completion system is available

= Command usage =

== Getting basic help ==

The ##help## command will display the list of known commands by the shell.

{{screen}}
[/]% help
Try one of these commands with the -h or --help switch [addmixin, cd, checkin, checkout, commit, connect, disconnect, exportnode, help, importnode, ls, pwd, rm, rollback, select, set]
{{/screen}}

== Command line usage ==

The basic CRaSH usage is like any shell, you just type a command with its options and arguments. However it is possible
 to compose commands and create powerful combinations.

=== Basic command usage ===

Typing the command followed by options and arguments will do the job

{{screen}}
% ls -d /
...
{{/screen}}

=== Command help display ===

Any command help can be displayed by using the -h argument:

{{screen}}
% ls -h
List the content of a node
 VAL            : Path of the node content to list
 -d (--depth) N : Print depth
{{/screen}}

=== Advanced command usage ===

A CRaSH command is able to consume and produce a stream of object, allowing complex interactions between commands
where they can exchange stream of compatible objets. Most of the time, JCR nodes are the objects exchanged by the
commands but any command is free to produce or consume any type.

By default a command that does not support this feature does not consumer or produce anything. Such commands usually
inherits from the ##org.crsh.command.ClassCommand## class that does not care about it. If you look at this class
you will see it extends the the ##org.crsh.command.BaseCommand##.

More advanced commands inherits from ##org.crsh.command.BaseCommand## class that specifies two generic types ##<C>##
and ##<P>##:

* ##<C>## is the type of the object that the command consumes
* ##<P>## is the type of the object that the command produces

The command composition provides two operators:

* The pipe operator **|** allows to stream a command output stream to a command input stream
* The distribution operator **+** allows to distribute an input stream to several commands and to combine the output stream
of several commands into a single stream.

=== Connecting a ##<Void,Node>## command to a ##<Node,Void>## command through a pipe ===

{{example title="Remove all nt:unstructed nodes"}}
{{screen}}
% select * from nt:unstructed | rm
{{/screen}}
{{/example}}

=== Connecting a ##<Void,Node>## command to two ##<Node,Void>## commands through a pipe ===

{{example title="Update the security of all nt:unstructed nodes"}}
{{screen}}
% select * from nt:unstructured | setperm -i any -a read + setperm -i any -a write
{{/screen}}
{{/example}}

=== Connecting two ##<Void,Node>## command to a ##<Node,Void>## commands through a pipe ==

{{example title="Add the mixin mix:referenceable to any node of type nt:file or nt:folder"}}
{{screen}}
% select * from nt:file + select * from nt:folder | addmixin mix:referenceable
{{/screen}}
{{/example}}

=== Mixed cases ===

When a command does not consume a stream but is involved in a distribution it will not receive any stream but will
be nevertheless invoked.

Likewise when a command does not produce a stream but is involved in a distribution, it will not produce anything but
will be nevertheless invoked.

= Base commands =

== ##sleep## command ==
{{include document="sleep.wiki" /}}

== ##man## command ==
{{include document="man.wiki" /}}

== ##log## command ==
{{include document="log.wiki" /}}

== ##thread## command ==
{{include document="thread.wiki" /}}

= JCR =

{{include document="jcr.wiki" /}}

